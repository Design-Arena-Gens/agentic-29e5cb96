"use client";
import { useMemo, useState } from 'react';
import FocusTrap from 'focus-trap-react';

export type Severity = 'Critical' | 'High' | 'Medium' | 'Low' | 'Info';

export type Vulnerability = {
  cve: string;
  severity: Severity;
  component: string;
  projects: string[];
  suppressed?: boolean;
};

const INITIAL_DATA: Vulnerability[] = [
  { cve: 'CVE-2024-12345', severity: 'Critical', component: 'log4j 2.17.0', projects: ['Billing API', 'Admin Portal'] },
  { cve: 'CVE-2023-01010', severity: 'High', component: 'openssl 1.1.1', projects: ['Mobile Backend'] },
  { cve: 'CVE-2022-77777', severity: 'Medium', component: 'lodash 4.17.21', projects: ['Web App', 'CLI'] },
  { cve: 'CVE-2021-22222', severity: 'Low', component: 'left-pad 1.3.0', projects: ['CLI'] },
  { cve: 'CVE-2020-33333', severity: 'Info', component: 'moment 2.29.4', projects: ['Legacy'] },
];

function severityClass(sev: Severity) {
  switch (sev) {
    case 'Critical': return 'badge badge-critical';
    case 'High': return 'badge badge-high';
    case 'Medium': return 'badge badge-medium';
    case 'Low': return 'badge badge-low';
    case 'Info': return 'badge badge-info';
  }
}

export function VulnerabilityTab() {
  const [query, setQuery] = useState('');
  const [data, setData] = useState<Vulnerability[]>(INITIAL_DATA);
  const [modalOpen, setModalOpen] = useState(false);
  const [selectedCve, setSelectedCve] = useState<string | null>(null);
  const [justification, setJustification] = useState('');
  const [expires, setExpires] = useState('');

  const filtered = useMemo(() => {
    const q = query.trim().toLowerCase();
    if (!q) return data;
    return data.filter(v =>
      v.cve.toLowerCase().includes(q) ||
      v.component.toLowerCase().includes(q) ||
      v.projects.join(' ').toLowerCase().includes(q)
    );
  }, [query, data]);

  function openSuppress(cve: string) {
    setSelectedCve(cve);
    setJustification('');
    setExpires('');
    setModalOpen(true);
  }

  function submitSuppression() {
    if (!selectedCve) return;
    setData(prev => prev.map(v => v.cve === selectedCve ? { ...v, suppressed: true } : v));
    setModalOpen(false);
  }

  return (
    <div className="space-y-4">
      <div className="flex flex-wrap items-center gap-2">
        <input
          className="h-9 w-72 rounded-md border border-slate-300 px-3 text-sm"
          placeholder="Filter by CVE, component, project"
          aria-label="Filter vulnerabilities"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
        />
        <span className="text-sm text-slate-600" aria-live="polite">{filtered.length} result{filtered.length === 1 ? '' : 's'}</span>
      </div>

      <div className="overflow-auto rounded-lg border border-slate-200 bg-white">
        <table className="table" role="grid" aria-label="CVE vulnerabilities table">
          <thead>
            <tr>
              <th scope="col">CVE</th>
              <th scope="col">Severity</th>
              <th scope="col">Component</th>
              <th scope="col">Projects</th>
              <th scope="col" className="w-40">Actions</th>
            </tr>
          </thead>
          <tbody>
            {filtered.map(v => (
              <tr key={v.cve} className={v.suppressed ? 'opacity-60' : ''}>
                <td className="font-mono">{v.cve}</td>
                <td><span className={severityClass(v.severity)}>{v.severity}</span></td>
                <td>{v.component}</td>
                <td>
                  <ul className="list-disc pl-5">
                    {v.projects.map(p => <li key={p}>{p}</li>)}
                  </ul>
                </td>
                <td>
                  <div className="flex gap-2">
                    <button className="btn" aria-label={`View details for ${v.cve}`}>Details</button>
                    <button className="btn" onClick={() => openSuppress(v.cve)} disabled={v.suppressed}>
                      {v.suppressed ? 'Suppressed' : 'Suppress'}
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {modalOpen && (
        <div role="dialog" aria-modal="true" aria-labelledby="suppress-title" className="modal-backdrop">
          <FocusTrap focusTrapOptions={{ clickOutsideDeactivates: true }}>
            <div className="modal-panel" role="document">
              <div className="flex items-start justify-between">
                <h2 id="suppress-title" className="text-lg font-semibold">Global Suppression</h2>
                <button className="btn" onClick={() => setModalOpen(false)} aria-label="Close modal">Close</button>
              </div>
              <p className="mt-1 text-sm text-slate-600">Provide justification and expiration for CVE suppression across all projects.</p>
              <form className="mt-4 space-y-3" onSubmit={(e) => { e.preventDefault(); submitSuppression(); }}>
                <div>
                  <label className="block text-sm font-medium" htmlFor="cve">CVE</label>
                  <input id="cve" className="mt-1 w-full rounded-md border border-slate-300 px-3 py-2 text-sm bg-slate-50" value={selectedCve ?? ''} readOnly />
                </div>
                <div>
                  <label className="block text-sm font-medium" htmlFor="just">Justification</label>
                  <textarea id="just" required className="mt-1 w-full rounded-md border border-slate-300 px-3 py-2 text-sm" value={justification} onChange={(e) => setJustification(e.target.value)} />
                </div>
                <div>
                  <label className="block text-sm font-medium" htmlFor="exp">Expiration date</label>
                  <input id="exp" type="date" required className="mt-1 w-full rounded-md border border-slate-300 px-3 py-2 text-sm" value={expires} onChange={(e) => setExpires(e.target.value)} />
                </div>
                <div className="flex justify-end gap-2 pt-2">
                  <button type="button" className="btn" onClick={() => setModalOpen(false)}>Cancel</button>
                  <button type="submit" className="btn btn-primary" disabled={!justification || !expires}>Suppress CVE</button>
                </div>
              </form>
            </div>
          </FocusTrap>
        </div>
      )}
    </div>
  );
}
